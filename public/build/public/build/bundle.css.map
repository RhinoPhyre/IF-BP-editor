{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\BlobReader.svelte",
    "..\\..\\CollapsibleSection.svelte"
  ],
  "sourcesContent": [
    "<script >\r\n    import { allBuildings } from \"../buildings\";\r\n\r\n    export let blob = \"\";\r\n    let decBlob = \"\";\r\n    let jsonDOM = null;\r\n    let connectionDOM = null;\r\n    let parcelDOM = null;\r\n    let files = [];\r\n    let filename = \"\";\r\n    let newBuilding = {};\r\n    //$: console.log (blob);\r\n\r\n    function parseFile() {\r\n        let file = files[0];\r\n        filename = file.name;\r\n        let reader = new FileReader();\r\n        reader.addEventListener(\"load\", () => { blob = reader.result;parseBlob();}, false);\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    function parseBlob() {\r\n        decBlob = atob(blob);\r\n        jsonDOM = JSON.parse(decBlob);\r\n        if (jsonDOM.gameState) {\r\n            parcelDOM = jsonDOM.gameState.parcels.parcelList;\r\n            connectionDOM = jsonDOM.gameState.nodeConnections;    \r\n            console.log(connectionDOM);        \r\n        } else {\r\n            parcelDOM = jsonDOM.details;\r\n            connectionDOM = jsonDOM.connections;\r\n        }\r\n    }\r\n\r\n    function encodeBlob() {\r\n        decBlob = JSON.stringify(jsonDOM);\r\n        console.log(decBlob);\r\n        blob = btoa(decBlob);\r\n        console.log(blob);\r\n    }\r\n\r\n    function saveBlob() {\r\n        encodeBlob();\r\n        var fileBlob = new Blob([blob]);\r\n        console.log(fileBlob);\r\n        const url = window.URL.createObjectURL(fileBlob);\r\n        const a = document.createElement('a');\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    }\r\n\r\n    function totalBuildings(parcel) {\r\n        let total = 0;\r\n        for (const building in parcel.buildings) {\r\n            total = total + parcel.buildings[building];\r\n            //console.log (total);\r\n        }\r\n        return total;\r\n    }\r\n    function incBuilding(parcel, name) {\r\n        let total = totalBuildings(parcel);\r\n        if (total < parcel.maxBuildings) {\r\n            let old = parcel.buildings[name];\r\n            parcel.buildings[name] = old + 1;\r\n            parcel.activeBuildings[name] = parcel.buildings[name];\r\n            jsonDOM = jsonDOM;\r\n        }\r\n    }\r\n\r\n    function decBuilding(parcel, name) {\r\n        let old = parcel.buildings[name];\r\n        if (old > 0) {\r\n            parcel.buildings[name] = old - 1;\r\n            parcel.activeBuildings[name] = parcel.buildings[name];\r\n            jsonDOM = jsonDOM;\r\n        }\r\n    }\r\n\r\n    function removeBuilding(parcel, name) {\r\n        delete parcel.buildings[name];\r\n        jsonDOM = jsonDOM;\r\n    }\r\n\r\n    function removeOutput(parcel, name) {\r\n        delete parcel.outputValues[name];\r\n        jsonDOM = jsonDOM;\r\n    }\r\n\r\n    function addBuilding(parcel, newBuilding) {\r\n        let total = totalBuildings(parcel);\r\n        if (total < parcel.maxBuildings) {\r\n            let nb = (newBuilding[parcel.id]);\r\n            parcel.buildings[nb] = 1;\r\n            console.log(parcel.buildings);\r\n            jsonDOM = jsonDOM; \r\n        } \r\n    }\r\n\r\n    function removeConnection(connection, id) {\r\n        jsonDOM.connections =  jsonDOM.connections.filter((c) => c.id !== id);\r\n        jsonDOM = jsonDOM;\r\n    }\r\n\r\n    function toggleDiv() {\r\n        \r\n    }\r\n</script>\r\n\r\nUpload: <input type=file bind:files={files}> <button class=\"btn btn__primary\" on:click={parseFile} disabled={files.length === 0}>Upload</button><br>\r\nor Paste Blueprint:\r\n<textarea bind:value={blob} rows=20 cols=80 />\r\n<button class=\"btn btn__primary\" disabled={blob.length === 0} on:click={parseBlob}>\r\n    Parse\r\n</button>\r\n<button class=\"btn btn__primary\" disabled={!jsonDOM} on:click={saveBlob}>\r\n    Save\r\n</button>\r\n<br>\r\n{#if jsonDOM}\r\n    <iframe id=\"my_iframe\" style=\"display:none;\"></iframe>\r\n    <h1>Parcels</h1>\r\n    {#each parcelDOM as parcel, index (parcel.id)}\r\n        {parcel.id} ({parcel.parcelType}) - Max Buildings: {totalBuildings(parcel)}/{parcel.maxBuildings}\r\n        <button on:click={toggleDiv()}>&#9660;</button><br>\r\n        <div id={parcel.id} class=\"collapsed\">\r\n            Buildings:<button class=\"btn btn__primary\" on:click={addBuilding(parcel, newBuilding)}>Add</button>\r\n            <select bind:value={newBuilding[parcel.id]} name=\"newBuilding\">\r\n                <option value=\"\">Choose Building...</option>\r\n                {#each allBuildings as building}\r\n                    <option value={building.id} style=\"background-image:url(icons/{building.id}-48.png);\">{building.name}</option>\r\n                {/each}\r\n            </select><br>\r\n            {#each Object.entries(parcel.buildings) as [name, qty]}\r\n                <button class=\"btn btn__primary\" on:click={decBuilding(parcel, name)}>-</button>\r\n                <button class=\"btn btn__primary\" on:click={incBuilding(parcel, name)}>+</button>\r\n                <img src=\"icons/{name}-48.png\" alt={allBuildings.filter((b) => b.id===name)[0].name} height=24 width=24/> \r\n                {allBuildings.filter((b) => b.id===name)[0].name }: {qty}  \r\n                <button class=\"btn btn__primary\" on:click={removeBuilding(parcel, name)}>remove</button>\r\n                <br>\r\n            {/each}\r\n            Outputs:<br>\r\n            {#each Object.entries(parcel.outputValues) as [name, type]}\r\n                {name}: {type.unloader}\r\n                <button class=\"btn btn__primary\" on:click={removeOutput(parcel, name)}>remove</button><br>\r\n            {:else}\r\n                None<br>\r\n            {/each}\r\n            <br>\r\n        </div>\r\n    {/each}\r\n    <h1>Connections</h1>\r\n    {#each connectionDOM.filter((c)=>c.id.substring(0,6) === \"xyflow\") as connection, index (connection.id)}\r\n        {connection.id} <button class=\"btn btn__primary\" on:click={removeConnection(connection, connection.id)}>Remove</button><br>\r\n        Source: {connection.source}  Target: {connection.target}<br>\r\n        Resource: {connection.sourceHandle}<br>\r\n        <br>\r\n    {/each}\r\n{/if}\r\n\r\n<br><br><br>\r\n{decBlob && decBlob}\r\n<br><br><br>\r\n\r\n<style>\r\n    .collapsed {\r\n        padding: 0 18px;\r\n        display: none;\r\n        overflow: hidden;\r\n        background-color: #f1f1f1;\r\n    }\r\n\r\n</style>",
    "<script>\r\n    // based on suggestions from:\r\n    // Inclusive Components by Heydon Pickering https://inclusive-components.design/collapsible-sections/\r\n    export let headerText;\r\n\r\n    let expanded = false\r\n</script>\r\n\r\n<div class=\"collapsible\">\r\n    <h3>\r\n        <button aria-expanded={expanded} on:click={() => expanded = !expanded}> + {headerText}\r\n        </button>\r\n    </h3>\r\n    \r\n    <div class='contents' hidden={!expanded}>\r\n        <slot></slot>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n  .collapsible {\r\n    border-bottom: 1px solid var(--gray-light, #eee);\r\n  }\r\n\t\r\n\th3 {\r\n\t\tmargin: 0;\r\n\t}\r\n\t\r\n  button {\r\n    background-color: var(--background, #fff);\r\n    color: var(--gray-darkest, #282828);\r\n    display: flex;\r\n\t\tjustify-content: space-between;\r\n    width: 100%;\r\n\t\tborder: none;\r\n\t\tmargin: 0;\r\n\t\tpadding: 1em 0.5em;\r\n  }\r\n\r\n  button[aria-expanded=\"true\"] {\r\n    border-bottom: 1px solid var(--gray-light, #eee);\r\n  }\r\n\r\n    button[aria-expanded=\"true\"] .vert {\r\n        display: none;\r\n    }\r\n\r\n    button:focus svg{\r\n        outline: 2px solid;\r\n    }\r\n\r\n    button [aria-expanded=\"true\"] rect {\r\n        fill: currentColor;\r\n    }\r\n\r\n    svg {\r\n        height: 0.7em;\r\n\t\t\t\twidth: 0.7em;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAwKI,wBAAW,CACP,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,MAAM,CAChB,gBAAgB,CAAE,OACtB;ACzJF,0BAAa,CACX,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,KAAK,CACjD,CAED,gBAAG,CACF,MAAM,CAAE,CACT,CAEC,oBAAO,CACL,gBAAgB,CAAE,IAAI,YAAY,CAAC,KAAK,CAAC,CACzC,KAAK,CAAE,IAAI,cAAc,CAAC,QAAQ,CAAC,CACnC,OAAO,CAAE,IAAI,CACf,eAAe,CAAE,aAAa,CAC5B,KAAK,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CAAC,KACb,CAEA,MAAM,CAAC,aAAa,CAAC,MAAM,eAAE,CAC3B,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,KAAK,CACjD"
}